' ************************************************************************************'
' *** PROGRAM:      CODEBOXX ODSSEY                                               *** '                
' *** WEEK 1:       ALGORITHMS AND PROBLEM SOLVING                                *** '
' *** DELIVERABLE:  RESIDENTIAL CONTROLLER ALGORITHM FOR ROCKET ELEVETORS         *** '
' *** BY:           JORGE CHAVARRIAGA                                             *** '
' *** DATE:         14-FEB-2020                                                   *** '
' ************************************************************************************'

' ***                               0. SYSTEM INITIALIZATION                       ***'
SEQUENCE initElevatorSystem
    SET elevatorStatus TO idle
    SET doorOpened TO FALSE
    SET rushHourMorning EQUAL TO 6-10 am
    SET rushHourAfternoon EQUAL TO 4-8 pm
END SEQUENCE

' ***                               1. INITIAL POSITION                            ***'
SEQUENCE initialPosition
    CALL time()
    IF hour >= 6 am AND hour <= 10 am THEN
        SET elevator1Position EQUAL TO floor10
        SET elevator2Position EQUAL TO floor5
    ELSE IF hour >= 4 pm AND hour <= 8 pm THEN
        SET elevator1Position AND elevator2Position EQUAL TO floor1
    ELSE
        SET elevator1Position EQUAL TO elevator1LastPosition
        SET elevator2Position EQUAL TO elevator2LastPosition
    ENDIF
END SEQUENCE

' ***                               2. EXTERNAL BUTTON                             ***'
SEQUENCE externalButton USING requestDirection AND requestFloor
    SET externalButtonStatus EQUAL on
    CALL findElevator() WITH requestDirection AND requestFloor RETURN elevator
    CALL addToElevatorQueue() WITH elevator AND requestFloor
    CALL moveElevator() WITH elevator
    SET externalButtonStatus EQUAL off
END SEQUENCE

' ***                               3. FIND ELEVATOR                              ***'
SEQUENCE findElevator USING requestDirection AND requestFloor
    FOR EACH elevator in elevators   
        SET elevator correctWay TO FALSE 
    END FOR
    FOR EACH elevator in elevators 
        IF elevatorStatus IS idle THEN      
            RETURN elevator
        ELSE IF elevatorDirection IS up AND requestDirection IS up AND requestFloor > elevator currentFloor THEN            
            SET elevator correctWay IS TRUE            
        ELSE elevatorDirection IS down AND requestDirection IS down AND requestFloor < elevator currentFloor THEN    
            SET elevator correctWay IS TRUE        
        END IF
    END FOR
    SET newGap EQUAL TO 0  
    SET elevatorID EQUAL TO 0 
    FOR EACH elevator in elevators           
        IF elevator correctWay IS TRUE THEN  
            SET gap IS CALCULATE ABSOLUTE(elevator CurrentFloor - Request Floor) 
        IF gap IS NOT 0 THEN 
            SET newGAP EQUAL TO CALCULATE ABSOLUTE(gap - newGap)
            IF gap < newGap THEN 
                SET elevatorId EQUAL TO elevator ID 
            END IF    
        END IF    
    END FOR
    FOR EACH elevator in elevators            
        IF elevatorId = elevator ID THEN
            RETURN elevator
        END IF  
    END FOR
    FOR EACH elevator in elevators            
        RETURN elevator
    END FOR
END SEQUENCE


' ***                               4. PUSH ELEVATOR TO QUEUE AND SORT             ***'
SEQUENCE addToElevatorQueue USING elevator AND requestFloor
    PUSH requestFloor TO elevatorQueue
    IF elevator direction IS up THEN
        SORT up elevatorQueue
    IF elevator direction IS down THEN
        SORT down elevatorQueue 
    ENDIF
END SEQUENCE

' ***                               5. MOVE ELEVATOR                               ***'
SEQUENCE moveElevator USING elevator
    FOR EACH request IN elevatorQueue
    IF request > elevator currentFloor THEN
      CALL moveUp() WITH elevator
    END IF
    IF firstRequest < elevator currentFloor THEN
      CALL moveDown() WITH Elevator
    END IF
END SEQUENCE

' ***                               6. MOVE UP                                     ***'
SEQUENCE moveUp USING elevator
    SET elevatorStatus TO moving
    SET elevator direction TO up
    GET firstRequest OF elevatorQueue 
    WHILE elevator currentFloor < firstRequest
        SET elevator currentfloor EQUAL (elevator currentfloor + 1)
        IF firstRequest IS EQUAL currentFloor THEN
            SET elevatorStatus TO stop
            CALL openDoor() WITH elevator
            POP the firstRequest OF elevatorQueue
        END IF
    END WHILE
    IF elevatorQueue IS EMPTY THEN
        CALL initialPosition()
        SET elevatorStatus TO idle
    END IF
END SEQUENCE

' ***                               7. MOVE DOWN                                   ***'
SEQUENCE moveDown USING elevator
    SET elevatorStatus TO moving
    SET elevator direction TO Down
    GET firstRequest OF elevatorQueue 
    WHILE elevator currentFloor > firstrequest
        SET elevator currentfloor EQUAL (elevator currentfloor - 1)
        IF firstrequest IS EQUAL currentFloor THEN
            SET elevatorStatus TO stop
            CALL openDoor() WITH elevator
            POP the firstRequest OF elevatorQueue
        END IF
    END WHILE
    IF elevatorQueue IS EMPTY THEN
        CALL initialPosition()
        SET elevatorStatus TO idle
    END IF
END SEQUENCE

' ***                               8. OPEN DOOR                                   ***'
SEQUENCE openDoor
    SET doorOpened EQUAL TRUE
    IF doorOpended EQUAL TRUE THEN
        SET timer to 8 seconds THEN
        CALL closeDoor()    
    END IF
END SEQUENCE

' ***                               9. CLOSE DOOR                                  ***'
SEQUENCE closeDoor
    CALL overWeight RETURN 
    SET closeDoor EQUAL TRUE
    IF doorSensor IS on OR overWeight > 800 kg THEN
        CALL openDoor() 
    ELSE IF doorSensor IS off AND overWeight <800 kg THEN
        SET closeDoor EQUAL TRUE
    END IF
END SEQUENCE

' ***                               10. CHECK WEIGHT                               ***'
SEQUENCE overWeight USING weightSensor AND maximumWeight
    FOR EACH elevator IN column
    SET maximumWeight TO 800 kg THEN
    READ weightSsensor THEN
    IF weightSensor >= 800 kg THEN
        SET overWeightLight TO on THEN
        CALL openDoor()
    ELSE IF weightSensor < 800 kg
        SET overWeightLight TO off
    END IF
    END FOR
END SEQUENCE

' ***                               11. INTERNAL BUTTON                            ***'
SEQUENCE internalButton USING elevator AND interalRequestFloor 
    SET internalButtonStatus EQUAL on
    Call addToElevatorQueue() WITH elevator AND internalRequestFloor
    CALL closeDoor() WITH elevator
    CALL moveElevator() WITH elevator
    SET internalButtonStatus EQUAL off
END SEQUENCE

' ***                               12. GETTING HOUR                       ***'
SEQUENCE time 
    SET hour EQUAL TO actualHour
END SEQUENCE
